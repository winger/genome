akka {
    extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

    actor {
        provider = "akka.remote.RemoteActorRefProvider"

#        serialize-messages = on

        default-dispatcher {
            #executor = "thread-pool-executor"
            throughput = 500
            mailbox-capacity = 1000
            mailbox-push-timeout-time = -1
        }

        kryo  {
            type = "nograph"
            idstrategy = "incremental"
            serializer-pool-size = 32
            buffer-size = 4096
            classes = [
                "ru.ifmo.genome.dna.Long1DNASeq",
                "ru.ifmo.genome.ds.Messages$size",
                "ru.ifmo.genome.ds.Messages$apply",
                "ru.ifmo.genome.ds.Messages$update1",
                "ru.ifmo.genome.data.FreqFilter$$anonfun$add$1$1$$anonfun$apply$1",
            ]
        }

        serializers {
            kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
        }

        serialization-bindings {
            "java.io.Serializable" = kryo
        }

        typed {
            timeout = 1000000000
        }
    }

    remote {
        transport = "akka.remote.netty.NettyRemoteTransport"
        netty {
            port = 2552
            backoff-timeout = 1000s
            #max-channel-memory-size = 10MiB
            max-total-memory-size = 256MiB
        }
    }
}

genome {
    storageNodes = [
        "akka://default@192.168.0.10:2552",
        "akka://default@192.168.0.10:2552",
        "akka://default@192.168.0.83:2552",
        "akka://default@192.168.0.83:2552",
        "akka://default@192.168.0.89:2552",
        "akka://default@192.168.0.89:2552",
        "akka://default@192.168.0.86:2552",
        "akka://default@192.168.0.86:2552",
        "akka://default@192.168.0.82:2552",
        "akka://default@192.168.0.82:2552",
        "akka://default@192.168.0.9:2552",
        "akka://default@192.168.0.9:2552",
        "akka://default@192.168.0.84:2552",
        "akka://default@192.168.0.84:2552",
    ]
    inputFile = "data/ecoli"
    outputFile = "data/graph"
    chunkSize = 64
}
